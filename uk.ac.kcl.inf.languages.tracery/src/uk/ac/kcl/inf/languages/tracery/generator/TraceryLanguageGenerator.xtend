/*
 * generated by Xtext 2.24.0
 */
package uk.ac.kcl.inf.languages.tracery.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import uk.ac.kcl.inf.languages.tracery.traceryLanguage.TraceryProgram

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class TraceryLanguageGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		val model = resource.contents.head as TraceryProgram
		fsa.generateFile(getFileName(model, resource), model.generate)
	}
	
	def getFileName(TraceryProgram program, Resource resource) {
		resource.URI.appendFileExtension('txt').lastSegment
	}
	
	def generate(TraceryProgram program) {
		val characters = program.toString.toCharArray
	'''
		«for (char character : characters) {
			if(character.equals('"')){
				
			}
			else if(character.equals('&')) {
				
			}
			else {
				
			}
		}»
	'''
	}
}
