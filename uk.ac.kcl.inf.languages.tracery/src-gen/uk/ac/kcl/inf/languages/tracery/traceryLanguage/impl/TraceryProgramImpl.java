/**
 * generated by Xtext 2.24.0
 */
package uk.ac.kcl.inf.languages.tracery.traceryLanguage.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import uk.ac.kcl.inf.languages.tracery.traceryLanguage.InitialStatement;
import uk.ac.kcl.inf.languages.tracery.traceryLanguage.Statement;
import uk.ac.kcl.inf.languages.tracery.traceryLanguage.TraceryLanguagePackage;
import uk.ac.kcl.inf.languages.tracery.traceryLanguage.TraceryProgram;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Tracery Program</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uk.ac.kcl.inf.languages.tracery.traceryLanguage.impl.TraceryProgramImpl#getInitialStatement <em>Initial Statement</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.languages.tracery.traceryLanguage.impl.TraceryProgramImpl#getStatements <em>Statements</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TraceryProgramImpl extends MinimalEObjectImpl.Container implements TraceryProgram
{
  /**
   * The cached value of the '{@link #getInitialStatement() <em>Initial Statement</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getInitialStatement()
   * @generated
   * @ordered
   */
  protected InitialStatement initialStatement;

  /**
   * The cached value of the '{@link #getStatements() <em>Statements</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStatements()
   * @generated
   * @ordered
   */
  protected EList<Statement> statements;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TraceryProgramImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return TraceryLanguagePackage.Literals.TRACERY_PROGRAM;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InitialStatement getInitialStatement()
  {
    return initialStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetInitialStatement(InitialStatement newInitialStatement, NotificationChain msgs)
  {
    InitialStatement oldInitialStatement = initialStatement;
    initialStatement = newInitialStatement;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, TraceryLanguagePackage.TRACERY_PROGRAM__INITIAL_STATEMENT, oldInitialStatement, newInitialStatement);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setInitialStatement(InitialStatement newInitialStatement)
  {
    if (newInitialStatement != initialStatement)
    {
      NotificationChain msgs = null;
      if (initialStatement != null)
        msgs = ((InternalEObject)initialStatement).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - TraceryLanguagePackage.TRACERY_PROGRAM__INITIAL_STATEMENT, null, msgs);
      if (newInitialStatement != null)
        msgs = ((InternalEObject)newInitialStatement).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - TraceryLanguagePackage.TRACERY_PROGRAM__INITIAL_STATEMENT, null, msgs);
      msgs = basicSetInitialStatement(newInitialStatement, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TraceryLanguagePackage.TRACERY_PROGRAM__INITIAL_STATEMENT, newInitialStatement, newInitialStatement));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Statement> getStatements()
  {
    if (statements == null)
    {
      statements = new EObjectContainmentEList<Statement>(Statement.class, this, TraceryLanguagePackage.TRACERY_PROGRAM__STATEMENTS);
    }
    return statements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case TraceryLanguagePackage.TRACERY_PROGRAM__INITIAL_STATEMENT:
        return basicSetInitialStatement(null, msgs);
      case TraceryLanguagePackage.TRACERY_PROGRAM__STATEMENTS:
        return ((InternalEList<?>)getStatements()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case TraceryLanguagePackage.TRACERY_PROGRAM__INITIAL_STATEMENT:
        return getInitialStatement();
      case TraceryLanguagePackage.TRACERY_PROGRAM__STATEMENTS:
        return getStatements();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case TraceryLanguagePackage.TRACERY_PROGRAM__INITIAL_STATEMENT:
        setInitialStatement((InitialStatement)newValue);
        return;
      case TraceryLanguagePackage.TRACERY_PROGRAM__STATEMENTS:
        getStatements().clear();
        getStatements().addAll((Collection<? extends Statement>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case TraceryLanguagePackage.TRACERY_PROGRAM__INITIAL_STATEMENT:
        setInitialStatement((InitialStatement)null);
        return;
      case TraceryLanguagePackage.TRACERY_PROGRAM__STATEMENTS:
        getStatements().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case TraceryLanguagePackage.TRACERY_PROGRAM__INITIAL_STATEMENT:
        return initialStatement != null;
      case TraceryLanguagePackage.TRACERY_PROGRAM__STATEMENTS:
        return statements != null && !statements.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //TraceryProgramImpl
