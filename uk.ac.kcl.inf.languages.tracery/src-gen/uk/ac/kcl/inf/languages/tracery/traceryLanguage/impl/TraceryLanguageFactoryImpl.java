/**
 * generated by Xtext 2.24.0
 */
package uk.ac.kcl.inf.languages.tracery.traceryLanguage.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import uk.ac.kcl.inf.languages.tracery.traceryLanguage.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class TraceryLanguageFactoryImpl extends EFactoryImpl implements TraceryLanguageFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static TraceryLanguageFactory init()
  {
    try
    {
      TraceryLanguageFactory theTraceryLanguageFactory = (TraceryLanguageFactory)EPackage.Registry.INSTANCE.getEFactory(TraceryLanguagePackage.eNS_URI);
      if (theTraceryLanguageFactory != null)
      {
        return theTraceryLanguageFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new TraceryLanguageFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TraceryLanguageFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case TraceryLanguagePackage.TRACERY_PROGRAM: return createTraceryProgram();
      case TraceryLanguagePackage.VARIABLE_DECLERATION: return createVariableDecleration();
      case TraceryLanguagePackage.INITIAL_STATEMENT: return createInitialStatement();
      case TraceryLanguagePackage.STATEMENT: return createStatement();
      case TraceryLanguagePackage.START_VALUE: return createstartValue();
      case TraceryLanguagePackage.NORMAL_VALUE: return createnormalValue();
      case TraceryLanguagePackage.INNER_STATEMENT: return createInnerStatement();
      case TraceryLanguagePackage.STARTING_JSON_EXPRESSION: return createStartingJSONExpression();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TraceryProgram createTraceryProgram()
  {
    TraceryProgramImpl traceryProgram = new TraceryProgramImpl();
    return traceryProgram;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableDecleration createVariableDecleration()
  {
    VariableDeclerationImpl variableDecleration = new VariableDeclerationImpl();
    return variableDecleration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InitialStatement createInitialStatement()
  {
    InitialStatementImpl initialStatement = new InitialStatementImpl();
    return initialStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Statement createStatement()
  {
    StatementImpl statement = new StatementImpl();
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public startValue createstartValue()
  {
    startValueImpl startValue = new startValueImpl();
    return startValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public normalValue createnormalValue()
  {
    normalValueImpl normalValue = new normalValueImpl();
    return normalValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InnerStatement createInnerStatement()
  {
    InnerStatementImpl innerStatement = new InnerStatementImpl();
    return innerStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StartingJSONExpression createStartingJSONExpression()
  {
    StartingJSONExpressionImpl startingJSONExpression = new StartingJSONExpressionImpl();
    return startingJSONExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TraceryLanguagePackage getTraceryLanguagePackage()
  {
    return (TraceryLanguagePackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static TraceryLanguagePackage getPackage()
  {
    return TraceryLanguagePackage.eINSTANCE;
  }

} //TraceryLanguageFactoryImpl
