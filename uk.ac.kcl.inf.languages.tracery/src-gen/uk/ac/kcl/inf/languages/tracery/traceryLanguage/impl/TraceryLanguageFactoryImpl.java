/**
 * generated by Xtext 2.24.0
 */
package uk.ac.kcl.inf.languages.tracery.traceryLanguage.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import uk.ac.kcl.inf.languages.tracery.traceryLanguage.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class TraceryLanguageFactoryImpl extends EFactoryImpl implements TraceryLanguageFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static TraceryLanguageFactory init()
  {
    try
    {
      TraceryLanguageFactory theTraceryLanguageFactory = (TraceryLanguageFactory)EPackage.Registry.INSTANCE.getEFactory(TraceryLanguagePackage.eNS_URI);
      if (theTraceryLanguageFactory != null)
      {
        return theTraceryLanguageFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new TraceryLanguageFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TraceryLanguageFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case TraceryLanguagePackage.TRACERY_PROGRAM: return createTraceryProgram();
      case TraceryLanguagePackage.STATEMENT: return createStatement();
      case TraceryLanguagePackage.INITIAL_JSON_LINES: return createInitialJSONLines();
      case TraceryLanguagePackage.FINAL_JSON_LINE: return createFinalJSONLine();
      case TraceryLanguagePackage.INITIAL_JSON_ENDING: return createInitialJSONEnding();
      case TraceryLanguagePackage.FINAL_JSON_ENDING: return createFinalJSONEnding();
      case TraceryLanguagePackage.START_VALUE: return createStartValue();
      case TraceryLanguagePackage.NORMAL_VALUE: return createNormalValue();
      case TraceryLanguagePackage.INNER_STATEMENTS: return createInnerStatements();
      case TraceryLanguagePackage.STRING_DECLARATION: return createStringDeclaration();
      case TraceryLanguagePackage.DECLARED_VARIABLE: return createDeclaredVariable();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TraceryProgram createTraceryProgram()
  {
    TraceryProgramImpl traceryProgram = new TraceryProgramImpl();
    return traceryProgram;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Statement createStatement()
  {
    StatementImpl statement = new StatementImpl();
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InitialJSONLines createInitialJSONLines()
  {
    InitialJSONLinesImpl initialJSONLines = new InitialJSONLinesImpl();
    return initialJSONLines;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FinalJSONLine createFinalJSONLine()
  {
    FinalJSONLineImpl finalJSONLine = new FinalJSONLineImpl();
    return finalJSONLine;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InitialJSONEnding createInitialJSONEnding()
  {
    InitialJSONEndingImpl initialJSONEnding = new InitialJSONEndingImpl();
    return initialJSONEnding;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FinalJSONEnding createFinalJSONEnding()
  {
    FinalJSONEndingImpl finalJSONEnding = new FinalJSONEndingImpl();
    return finalJSONEnding;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StartValue createStartValue()
  {
    StartValueImpl startValue = new StartValueImpl();
    return startValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NormalValue createNormalValue()
  {
    NormalValueImpl normalValue = new NormalValueImpl();
    return normalValue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public InnerStatements createInnerStatements()
  {
    InnerStatementsImpl innerStatements = new InnerStatementsImpl();
    return innerStatements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public StringDeclaration createStringDeclaration()
  {
    StringDeclarationImpl stringDeclaration = new StringDeclarationImpl();
    return stringDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DeclaredVariable createDeclaredVariable()
  {
    DeclaredVariableImpl declaredVariable = new DeclaredVariableImpl();
    return declaredVariable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TraceryLanguagePackage getTraceryLanguagePackage()
  {
    return (TraceryLanguagePackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static TraceryLanguagePackage getPackage()
  {
    return TraceryLanguagePackage.eINSTANCE;
  }

} //TraceryLanguageFactoryImpl
