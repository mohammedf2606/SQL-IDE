/*
 * generated by Xtext 2.24.0
 */
grammar InternalTraceryLanguage;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package uk.ac.kcl.inf.languages.tracery.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package uk.ac.kcl.inf.languages.tracery.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import uk.ac.kcl.inf.languages.tracery.services.TraceryLanguageGrammarAccess;

}

@parser::members {

 	private TraceryLanguageGrammarAccess grammarAccess;

    public InternalTraceryLanguageParser(TokenStream input, TraceryLanguageGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "TraceryProgram";
   	}

   	@Override
   	protected TraceryLanguageGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleTraceryProgram
entryRuleTraceryProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTraceryProgramRule()); }
	iv_ruleTraceryProgram=ruleTraceryProgram
	{ $current=$iv_ruleTraceryProgram.current; }
	EOF;

// Rule TraceryProgram
ruleTraceryProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='{'
		{
			newLeafNode(otherlv_0, grammarAccess.getTraceryProgramAccess().getLeftCurlyBracketKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTraceryProgramAccess().getInitialStatementInitialJSONLineParserRuleCall_1_0());
				}
				lv_initialStatement_1_0=ruleInitialJSONLine
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTraceryProgramRule());
					}
					add(
						$current,
						"initialStatement",
						lv_initialStatement_1_0,
						"uk.ac.kcl.inf.languages.tracery.TraceryLanguage.InitialJSONLine");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='}'
		{
			newLeafNode(otherlv_2, grammarAccess.getTraceryProgramAccess().getRightCurlyBracketKeyword_2());
		}
	)
;

// Entry rule entryRuleInitialJSONLine
entryRuleInitialJSONLine returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}:
	{ newCompositeNode(grammarAccess.getInitialJSONLineRule()); }
	iv_ruleInitialJSONLine=ruleInitialJSONLine
	{ $current=$iv_ruleInitialJSONLine.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule InitialJSONLine
ruleInitialJSONLine returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='&'
		{
			newLeafNode(otherlv_0, grammarAccess.getInitialJSONLineAccess().getAmpersandKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getInitialJSONLineAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInitialJSONLineRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='&'
		{
			newLeafNode(otherlv_2, grammarAccess.getInitialJSONLineAccess().getAmpersandKeyword_2());
		}
		otherlv_3=':'
		{
			newLeafNode(otherlv_3, grammarAccess.getInitialJSONLineAccess().getColonKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInitialJSONLineAccess().getValueInitialJSONEndingParserRuleCall_4_0());
				}
				lv_value_4_0=ruleInitialJSONEnding
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInitialJSONLineRule());
					}
					set(
						$current,
						"value",
						lv_value_4_0,
						"uk.ac.kcl.inf.languages.tracery.TraceryLanguage.InitialJSONEnding");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleInitialJSONEnding
entryRuleInitialJSONEnding returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}:
	{ newCompositeNode(grammarAccess.getInitialJSONEndingRule()); }
	iv_ruleInitialJSONEnding=ruleInitialJSONEnding
	{ $current=$iv_ruleInitialJSONEnding.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule InitialJSONEnding
ruleInitialJSONEnding returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getInitialJSONEndingAccess().getLeftSquareBracketKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInitialJSONEndingAccess().getStartValStartValueParserRuleCall_1_0());
				}
				lv_startVal_1_0=ruleStartValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInitialJSONEndingRule());
					}
					add(
						$current,
						"startVal",
						lv_startVal_1_0,
						"uk.ac.kcl.inf.languages.tracery.TraceryLanguage.StartValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getInitialJSONEndingAccess().getValsNormalValueParserRuleCall_2_0());
				}
				lv_vals_2_0=ruleNormalValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInitialJSONEndingRule());
					}
					add(
						$current,
						"vals",
						lv_vals_2_0,
						"uk.ac.kcl.inf.languages.tracery.TraceryLanguage.NormalValue");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3=']'
		{
			newLeafNode(otherlv_3, grammarAccess.getInitialJSONEndingAccess().getRightSquareBracketKeyword_3());
		}
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleStartValue
entryRuleStartValue returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}:
	{ newCompositeNode(grammarAccess.getStartValueRule()); }
	iv_ruleStartValue=ruleStartValue
	{ $current=$iv_ruleStartValue.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule StartValue
ruleStartValue returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
@after {
	leaveRule();
}:
	(
		otherlv_0='&'
		{
			newLeafNode(otherlv_0, grammarAccess.getStartValueAccess().getAmpersandKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStartValueAccess().getValueInnerStatementsInnerStatementsParserRuleCall_1_0());
				}
				lv_valueInnerStatements_1_0=ruleInnerStatements
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStartValueRule());
					}
					add(
						$current,
						"valueInnerStatements",
						lv_valueInnerStatements_1_0,
						"uk.ac.kcl.inf.languages.tracery.TraceryLanguage.InnerStatements");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='&'
		{
			newLeafNode(otherlv_2, grammarAccess.getStartValueAccess().getAmpersandKeyword_2());
		}
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleNormalValue
entryRuleNormalValue returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}:
	{ newCompositeNode(grammarAccess.getNormalValueRule()); }
	iv_ruleNormalValue=ruleNormalValue
	{ $current=$iv_ruleNormalValue.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule NormalValue
ruleNormalValue returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_WS");
}
@after {
	leaveRule();
}:
	(
		otherlv_0=','
		{
			newLeafNode(otherlv_0, grammarAccess.getNormalValueAccess().getCommaKeyword_0());
		}
		otherlv_1='&'
		{
			newLeafNode(otherlv_1, grammarAccess.getNormalValueAccess().getAmpersandKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNormalValueAccess().getValueInnerStatementsInnerStatementsParserRuleCall_2_0());
				}
				lv_valueInnerStatements_2_0=ruleInnerStatements
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNormalValueRule());
					}
					add(
						$current,
						"valueInnerStatements",
						lv_valueInnerStatements_2_0,
						"uk.ac.kcl.inf.languages.tracery.TraceryLanguage.InnerStatements");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='&'
		{
			newLeafNode(otherlv_3, grammarAccess.getNormalValueAccess().getAmpersandKeyword_3());
		}
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleInnerStatements
entryRuleInnerStatements returns [EObject current=null]@init {
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}:
	{ newCompositeNode(grammarAccess.getInnerStatementsRule()); }
	iv_ruleInnerStatements=ruleInnerStatements
	{ $current=$iv_ruleInnerStatements.current; }
	EOF;
finally {
	myHiddenTokenState.restore();
}

// Rule InnerStatements
ruleInnerStatements returns [EObject current=null]
@init {
	enterRule();
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_val_0_0=RULE_STRING
				{
					newLeafNode(lv_val_0_0, grammarAccess.getInnerStatementsAccess().getValSTRINGTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInnerStatementsRule());
					}
					setWithLastConsumed(
						$current,
						"val",
						lv_val_0_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getInnerStatementsAccess().getDeclaredVariableParserRuleCall_1());
		}
		this_DeclaredVariable_1=ruleDeclaredVariable
		{
			$current = $this_DeclaredVariable_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;
finally {
	myHiddenTokenState.restore();
}

// Entry rule entryRuleDeclaredVariable
entryRuleDeclaredVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeclaredVariableRule()); }
	iv_ruleDeclaredVariable=ruleDeclaredVariable
	{ $current=$iv_ruleDeclaredVariable.current; }
	EOF;

// Rule DeclaredVariable
ruleDeclaredVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getDeclaredVariableRule());
				}
			}
			otherlv_0=RULE_ID
			{
				newLeafNode(otherlv_0, grammarAccess.getDeclaredVariableAccess().getVarInitialJSONLineCrossReference_0());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
