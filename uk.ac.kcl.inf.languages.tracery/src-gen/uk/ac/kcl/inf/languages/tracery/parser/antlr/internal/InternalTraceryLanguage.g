/*
 * generated by Xtext 2.24.0
 */
grammar InternalTraceryLanguage;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package uk.ac.kcl.inf.languages.tracery.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package uk.ac.kcl.inf.languages.tracery.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import uk.ac.kcl.inf.languages.tracery.services.TraceryLanguageGrammarAccess;

}

@parser::members {

 	private TraceryLanguageGrammarAccess grammarAccess;

    public InternalTraceryLanguageParser(TokenStream input, TraceryLanguageGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "TraceryProgram";
   	}

   	@Override
   	protected TraceryLanguageGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleTraceryProgram
entryRuleTraceryProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTraceryProgramRule()); }
	iv_ruleTraceryProgram=ruleTraceryProgram
	{ $current=$iv_ruleTraceryProgram.current; }
	EOF;

// Rule TraceryProgram
ruleTraceryProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='{'
		{
			newLeafNode(otherlv_0, grammarAccess.getTraceryProgramAccess().getLeftCurlyBracketKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTraceryProgramAccess().getInitialStatementInitialStatementParserRuleCall_1_0());
				}
				lv_initialStatement_1_0=ruleInitialStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTraceryProgramRule());
					}
					set(
						$current,
						"initialStatement",
						lv_initialStatement_1_0,
						"uk.ac.kcl.inf.languages.tracery.TraceryLanguage.InitialStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTraceryProgramAccess().getStatementsStatementParserRuleCall_2_0());
				}
				lv_statements_2_0=ruleStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTraceryProgramRule());
					}
					add(
						$current,
						"statements",
						lv_statements_2_0,
						"uk.ac.kcl.inf.languages.tracery.TraceryLanguage.Statement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getTraceryProgramAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleVariableDecleration
entryRuleVariableDecleration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableDeclerationRule()); }
	iv_ruleVariableDecleration=ruleVariableDecleration
	{ $current=$iv_ruleVariableDecleration.current; }
	EOF;

// Rule VariableDecleration
ruleVariableDecleration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getVariableDeclerationAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getVariableDeclerationRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleInitialStatement
entryRuleInitialStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInitialStatementRule()); }
	iv_ruleInitialStatement=ruleInitialStatement
	{ $current=$iv_ruleInitialStatement.current; }
	EOF;

// Rule InitialStatement
ruleInitialStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='&origin&'
		{
			newLeafNode(otherlv_0, grammarAccess.getInitialStatementAccess().getOriginKeyword_0());
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getInitialStatementAccess().getColonKeyword_1());
		}
		otherlv_2='['
		{
			newLeafNode(otherlv_2, grammarAccess.getInitialStatementAccess().getLeftSquareBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInitialStatementAccess().getStartValStartValueParserRuleCall_3_0());
				}
				lv_startVal_3_0=rulestartValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInitialStatementRule());
					}
					add(
						$current,
						"startVal",
						lv_startVal_3_0,
						"uk.ac.kcl.inf.languages.tracery.TraceryLanguage.startValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getInitialStatementAccess().getValsNormalValueParserRuleCall_4_0());
				}
				lv_vals_4_0=rulenormalValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInitialStatementRule());
					}
					add(
						$current,
						"vals",
						lv_vals_4_0,
						"uk.ac.kcl.inf.languages.tracery.TraceryLanguage.normalValue");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_5=']'
		{
			newLeafNode(otherlv_5, grammarAccess.getInitialStatementAccess().getRightSquareBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=','
		{
			newLeafNode(otherlv_0, grammarAccess.getStatementAccess().getCommaKeyword_0());
		}
		otherlv_1='&'
		{
			newLeafNode(otherlv_1, grammarAccess.getStatementAccess().getAmpersandKeyword_1());
		}
		{
			newCompositeNode(grammarAccess.getStatementAccess().getStartingJSONExpressionParserRuleCall_2());
		}
		this_StartingJSONExpression_2=ruleStartingJSONExpression
		{
			$current = $this_StartingJSONExpression_2.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_3='&'
		{
			newLeafNode(otherlv_3, grammarAccess.getStatementAccess().getAmpersandKeyword_3());
		}
		otherlv_4=':'
		{
			newLeafNode(otherlv_4, grammarAccess.getStatementAccess().getColonKeyword_4());
		}
		otherlv_5='['
		{
			newLeafNode(otherlv_5, grammarAccess.getStatementAccess().getLeftSquareBracketKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementAccess().getStartValStartValueParserRuleCall_6_0());
				}
				lv_startVal_6_0=rulestartValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementRule());
					}
					add(
						$current,
						"startVal",
						lv_startVal_6_0,
						"uk.ac.kcl.inf.languages.tracery.TraceryLanguage.startValue");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementAccess().getValsNormalValueParserRuleCall_7_0());
				}
				lv_vals_7_0=rulenormalValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementRule());
					}
					add(
						$current,
						"vals",
						lv_vals_7_0,
						"uk.ac.kcl.inf.languages.tracery.TraceryLanguage.normalValue");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_8=']'
		{
			newLeafNode(otherlv_8, grammarAccess.getStatementAccess().getRightSquareBracketKeyword_8());
		}
	)
;

// Entry rule entryRulestartValue
entryRulestartValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStartValueRule()); }
	iv_rulestartValue=rulestartValue
	{ $current=$iv_rulestartValue.current; }
	EOF;

// Rule startValue
rulestartValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getStartValueAccess().getStartValueAction_0(),
					$current);
			}
		)
		otherlv_1='&'
		{
			newLeafNode(otherlv_1, grammarAccess.getStartValueAccess().getAmpersandKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStartValueAccess().getInnardsInnerStatementParserRuleCall_2_0());
				}
				lv_innards_2_0=ruleInnerStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStartValueRule());
					}
					add(
						$current,
						"innards",
						lv_innards_2_0,
						"uk.ac.kcl.inf.languages.tracery.TraceryLanguage.InnerStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3='&'
		{
			newLeafNode(otherlv_3, grammarAccess.getStartValueAccess().getAmpersandKeyword_3());
		}
	)
;

// Entry rule entryRulenormalValue
entryRulenormalValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNormalValueRule()); }
	iv_rulenormalValue=rulenormalValue
	{ $current=$iv_rulenormalValue.current; }
	EOF;

// Rule normalValue
rulenormalValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getNormalValueAccess().getNormalValueAction_0(),
					$current);
			}
		)
		otherlv_1=','
		{
			newLeafNode(otherlv_1, grammarAccess.getNormalValueAccess().getCommaKeyword_1());
		}
		otherlv_2='&'
		{
			newLeafNode(otherlv_2, grammarAccess.getNormalValueAccess().getAmpersandKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNormalValueAccess().getInnardsInnerStatementParserRuleCall_3_0());
				}
				lv_innards_3_0=ruleInnerStatement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNormalValueRule());
					}
					add(
						$current,
						"innards",
						lv_innards_3_0,
						"uk.ac.kcl.inf.languages.tracery.TraceryLanguage.InnerStatement");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='&'
		{
			newLeafNode(otherlv_4, grammarAccess.getNormalValueAccess().getAmpersandKeyword_4());
		}
	)
;

// Entry rule entryRuleInnerStatement
entryRuleInnerStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInnerStatementRule()); }
	iv_ruleInnerStatement=ruleInnerStatement
	{ $current=$iv_ruleInnerStatement.current; }
	EOF;

// Rule InnerStatement
ruleInnerStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_value_0_0=RULE_STRING
				{
					newLeafNode(lv_value_0_0, grammarAccess.getInnerStatementAccess().getValueSTRINGTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInnerStatementRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_0_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		    |
		(
			otherlv_1='#'
			{
				newLeafNode(otherlv_1, grammarAccess.getInnerStatementAccess().getNumberSignKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getInnerStatementAccess().getVariableDeclerationParserRuleCall_1_1());
			}
			this_VariableDecleration_2=ruleVariableDecleration
			{
				$current = $this_VariableDecleration_2.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_3='#'
			{
				newLeafNode(otherlv_3, grammarAccess.getInnerStatementAccess().getNumberSignKeyword_1_2());
			}
		)
		    |
		(
			otherlv_4='#'
			{
				newLeafNode(otherlv_4, grammarAccess.getInnerStatementAccess().getNumberSignKeyword_2_0());
			}
			{
				newCompositeNode(grammarAccess.getInnerStatementAccess().getVariableDeclerationParserRuleCall_2_1());
			}
			this_VariableDecleration_5=ruleVariableDecleration
			{
				$current = $this_VariableDecleration_5.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_6='.ed#'
			{
				newLeafNode(otherlv_6, grammarAccess.getInnerStatementAccess().getEdKeyword_2_2());
			}
		)
		    |
		(
			otherlv_7='#'
			{
				newLeafNode(otherlv_7, grammarAccess.getInnerStatementAccess().getNumberSignKeyword_3_0());
			}
			{
				newCompositeNode(grammarAccess.getInnerStatementAccess().getVariableDeclerationParserRuleCall_3_1());
			}
			this_VariableDecleration_8=ruleVariableDecleration
			{
				$current = $this_VariableDecleration_8.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_9='.a#'
			{
				newLeafNode(otherlv_9, grammarAccess.getInnerStatementAccess().getAKeyword_3_2());
			}
		)
		    |
		(
			otherlv_10='#'
			{
				newLeafNode(otherlv_10, grammarAccess.getInnerStatementAccess().getNumberSignKeyword_4_0());
			}
			{
				newCompositeNode(grammarAccess.getInnerStatementAccess().getVariableDeclerationParserRuleCall_4_1());
			}
			this_VariableDecleration_11=ruleVariableDecleration
			{
				$current = $this_VariableDecleration_11.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_12='.the#'
			{
				newLeafNode(otherlv_12, grammarAccess.getInnerStatementAccess().getTheKeyword_4_2());
			}
		)
		    |
		(
			otherlv_13='#'
			{
				newLeafNode(otherlv_13, grammarAccess.getInnerStatementAccess().getNumberSignKeyword_5_0());
			}
			{
				newCompositeNode(grammarAccess.getInnerStatementAccess().getVariableDeclerationParserRuleCall_5_1());
			}
			this_VariableDecleration_14=ruleVariableDecleration
			{
				$current = $this_VariableDecleration_14.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_15='.capitalise#'
			{
				newLeafNode(otherlv_15, grammarAccess.getInnerStatementAccess().getCapitaliseKeyword_5_2());
			}
		)
	)
;

// Entry rule entryRuleStartingJSONExpression
entryRuleStartingJSONExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStartingJSONExpressionRule()); }
	iv_ruleStartingJSONExpression=ruleStartingJSONExpression
	{ $current=$iv_ruleStartingJSONExpression.current; }
	EOF;

// Rule StartingJSONExpression
ruleStartingJSONExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getStartingJSONExpressionRule());
				}
			}
			otherlv_0=RULE_ID
			{
				newLeafNode(otherlv_0, grammarAccess.getStartingJSONExpressionAccess().getVarVariableDeclerationCrossReference_0());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
