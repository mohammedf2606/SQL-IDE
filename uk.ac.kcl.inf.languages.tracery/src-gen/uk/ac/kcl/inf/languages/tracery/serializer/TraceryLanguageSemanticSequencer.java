/*
 * generated by Xtext 2.24.0
 */
package uk.ac.kcl.inf.languages.tracery.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import uk.ac.kcl.inf.languages.tracery.services.TraceryLanguageGrammarAccess;
import uk.ac.kcl.inf.languages.tracery.traceryLanguage.DeclaredVariable;
import uk.ac.kcl.inf.languages.tracery.traceryLanguage.FinalJSONLine;
import uk.ac.kcl.inf.languages.tracery.traceryLanguage.InitialJSONLines;
import uk.ac.kcl.inf.languages.tracery.traceryLanguage.NormalValue;
import uk.ac.kcl.inf.languages.tracery.traceryLanguage.StartValue;
import uk.ac.kcl.inf.languages.tracery.traceryLanguage.Statement;
import uk.ac.kcl.inf.languages.tracery.traceryLanguage.StringDeclaration;
import uk.ac.kcl.inf.languages.tracery.traceryLanguage.TraceryLanguagePackage;
import uk.ac.kcl.inf.languages.tracery.traceryLanguage.TraceryProgram;

@SuppressWarnings("all")
public class TraceryLanguageSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private TraceryLanguageGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == TraceryLanguagePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TraceryLanguagePackage.DECLARED_VARIABLE:
				sequence_DeclaredVariable(context, (DeclaredVariable) semanticObject); 
				return; 
			case TraceryLanguagePackage.FINAL_JSON_LINE:
				sequence_FinalJSONLine(context, (FinalJSONLine) semanticObject); 
				return; 
			case TraceryLanguagePackage.INITIAL_JSON_LINES:
				sequence_InitialJSONLines(context, (InitialJSONLines) semanticObject); 
				return; 
			case TraceryLanguagePackage.NORMAL_VALUE:
				sequence_NormalValue(context, (NormalValue) semanticObject); 
				return; 
			case TraceryLanguagePackage.START_VALUE:
				if (rule == grammarAccess.getFinalJSONEndingRule()) {
					sequence_FinalJSONEnding_StartValue(context, (StartValue) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInitialJSONEndingRule()
						|| rule == grammarAccess.getInnerValuesRule()) {
					sequence_InnerValues_StartValue(context, (StartValue) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getStartValueRule()) {
					sequence_StartValue(context, (StartValue) semanticObject); 
					return; 
				}
				else break;
			case TraceryLanguagePackage.STATEMENT:
				sequence_Statement(context, (Statement) semanticObject); 
				return; 
			case TraceryLanguagePackage.STRING_DECLARATION:
				sequence_StringDeclaration(context, (StringDeclaration) semanticObject); 
				return; 
			case TraceryLanguagePackage.TRACERY_PROGRAM:
				sequence_TraceryProgram(context, (TraceryProgram) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     InnerStatements returns DeclaredVariable
	 *     DeclaredVariable returns DeclaredVariable
	 *
	 * Constraint:
	 *     variable=[InitialJSONLines|ID]
	 */
	protected void sequence_DeclaredVariable(ISerializationContext context, DeclaredVariable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TraceryLanguagePackage.Literals.DECLARED_VARIABLE__VARIABLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TraceryLanguagePackage.Literals.DECLARED_VARIABLE__VARIABLE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDeclaredVariableAccess().getVariableInitialJSONLinesIDTerminalRuleCall_1_0_1(), semanticObject.eGet(TraceryLanguagePackage.Literals.DECLARED_VARIABLE__VARIABLE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FinalJSONEnding returns StartValue
	 *
	 * Constraint:
	 *     (valueInnerStatements+=InnerStatements+ vals+=NormalValue*)
	 */
	protected void sequence_FinalJSONEnding_StartValue(ISerializationContext context, StartValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FinalJSONLine returns FinalJSONLine
	 *
	 * Constraint:
	 *     value=FinalJSONEnding
	 */
	protected void sequence_FinalJSONLine(ISerializationContext context, FinalJSONLine semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TraceryLanguagePackage.Literals.FINAL_JSON_LINE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TraceryLanguagePackage.Literals.FINAL_JSON_LINE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFinalJSONLineAccess().getValueFinalJSONEndingParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     InitialJSONLines returns InitialJSONLines
	 *
	 * Constraint:
	 *     (name=ID value=InitialJSONEnding)
	 */
	protected void sequence_InitialJSONLines(ISerializationContext context, InitialJSONLines semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TraceryLanguagePackage.Literals.INITIAL_JSON_LINES__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TraceryLanguagePackage.Literals.INITIAL_JSON_LINES__NAME));
			if (transientValues.isValueTransient(semanticObject, TraceryLanguagePackage.Literals.INITIAL_JSON_LINES__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TraceryLanguagePackage.Literals.INITIAL_JSON_LINES__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInitialJSONLinesAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getInitialJSONLinesAccess().getValueInitialJSONEndingParserRuleCall_4_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     InitialJSONEnding returns StartValue
	 *     InnerValues returns StartValue
	 *
	 * Constraint:
	 *     (valueInnerStatements+=InnerStatements+ vals+=NormalValue*)
	 */
	protected void sequence_InnerValues_StartValue(ISerializationContext context, StartValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NormalValue returns NormalValue
	 *
	 * Constraint:
	 *     valueInnerStatements+=InnerStatements+
	 */
	protected void sequence_NormalValue(ISerializationContext context, NormalValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StartValue returns StartValue
	 *
	 * Constraint:
	 *     valueInnerStatements+=InnerStatements+
	 */
	protected void sequence_StartValue(ISerializationContext context, StartValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns Statement
	 *
	 * Constraint:
	 *     (initialStatement+=InitialJSONLines* finalStatement=FinalJSONLine)
	 */
	protected void sequence_Statement(ISerializationContext context, Statement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InnerStatements returns StringDeclaration
	 *     StringDeclaration returns StringDeclaration
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_StringDeclaration(ISerializationContext context, StringDeclaration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TraceryLanguagePackage.Literals.STRING_DECLARATION__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TraceryLanguagePackage.Literals.STRING_DECLARATION__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStringDeclarationAccess().getValueSTRINGTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TraceryProgram returns TraceryProgram
	 *
	 * Constraint:
	 *     statements+=Statement
	 */
	protected void sequence_TraceryProgram(ISerializationContext context, TraceryProgram semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
