/*
 * generated by Xtext 2.24.0
 */
package uk.ac.kcl.inf.languages.tracery.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import uk.ac.kcl.inf.languages.tracery.services.TraceryLanguageGrammarAccess;
import uk.ac.kcl.inf.languages.tracery.traceryLanguage.InitialJSONLine;
import uk.ac.kcl.inf.languages.tracery.traceryLanguage.InnerStatement;
import uk.ac.kcl.inf.languages.tracery.traceryLanguage.StartingJSONExpression;
import uk.ac.kcl.inf.languages.tracery.traceryLanguage.TraceryLanguagePackage;
import uk.ac.kcl.inf.languages.tracery.traceryLanguage.TraceryProgram;
import uk.ac.kcl.inf.languages.tracery.traceryLanguage.VariableDecleration;
import uk.ac.kcl.inf.languages.tracery.traceryLanguage.normalValue;
import uk.ac.kcl.inf.languages.tracery.traceryLanguage.startValue;

@SuppressWarnings("all")
public class TraceryLanguageSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private TraceryLanguageGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == TraceryLanguagePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TraceryLanguagePackage.INITIAL_JSON_LINE:
				sequence_InitialJSONLine(context, (InitialJSONLine) semanticObject); 
				return; 
			case TraceryLanguagePackage.INNER_STATEMENT:
				sequence_InnerStatement(context, (InnerStatement) semanticObject); 
				return; 
			case TraceryLanguagePackage.STARTING_JSON_EXPRESSION:
				if (rule == grammarAccess.getNormalJSONLineRule()) {
					sequence_NormalJSONLine_StartingJSONExpression(context, (StartingJSONExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getStartingJSONExpressionRule()) {
					sequence_StartingJSONExpression(context, (StartingJSONExpression) semanticObject); 
					return; 
				}
				else break;
			case TraceryLanguagePackage.TRACERY_PROGRAM:
				sequence_TraceryProgram(context, (TraceryProgram) semanticObject); 
				return; 
			case TraceryLanguagePackage.VARIABLE_DECLERATION:
				sequence_VariableDecleration(context, (VariableDecleration) semanticObject); 
				return; 
			case TraceryLanguagePackage.NORMAL_VALUE:
				sequence_normalValue(context, (normalValue) semanticObject); 
				return; 
			case TraceryLanguagePackage.START_VALUE:
				sequence_startValue(context, (startValue) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     InitialJSONLine returns InitialJSONLine
	 *
	 * Constraint:
	 *     (startVal+=startValue vals+=normalValue*)
	 */
	protected void sequence_InitialJSONLine(ISerializationContext context, InitialJSONLine semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InnerStatement returns InnerStatement
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_InnerStatement(ISerializationContext context, InnerStatement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TraceryLanguagePackage.Literals.INNER_STATEMENT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TraceryLanguagePackage.Literals.INNER_STATEMENT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInnerStatementAccess().getValueSTRINGTerminalRuleCall_0_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalJSONLine returns StartingJSONExpression
	 *
	 * Constraint:
	 *     (var=[VariableDecleration|ID] startVal+=startValue vals+=normalValue*)
	 */
	protected void sequence_NormalJSONLine_StartingJSONExpression(ISerializationContext context, StartingJSONExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StartingJSONExpression returns StartingJSONExpression
	 *
	 * Constraint:
	 *     var=[VariableDecleration|ID]
	 */
	protected void sequence_StartingJSONExpression(ISerializationContext context, StartingJSONExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TraceryLanguagePackage.Literals.STARTING_JSON_EXPRESSION__VAR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TraceryLanguagePackage.Literals.STARTING_JSON_EXPRESSION__VAR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getStartingJSONExpressionAccess().getVarVariableDeclerationIDTerminalRuleCall_0_1(), semanticObject.eGet(TraceryLanguagePackage.Literals.STARTING_JSON_EXPRESSION__VAR, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TraceryProgram returns TraceryProgram
	 *
	 * Constraint:
	 *     (initialStatement=InitialJSONLine statements+=NormalJSONLine*)
	 */
	protected void sequence_TraceryProgram(ISerializationContext context, TraceryProgram semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VariableDecleration returns VariableDecleration
	 *     InnerStatement returns VariableDecleration
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_VariableDecleration(ISerializationContext context, VariableDecleration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TraceryLanguagePackage.Literals.VARIABLE_DECLERATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TraceryLanguagePackage.Literals.VARIABLE_DECLERATION__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariableDeclerationAccess().getNameIDTerminalRuleCall_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     normalValue returns normalValue
	 *
	 * Constraint:
	 *     value+=InnerStatement*
	 */
	protected void sequence_normalValue(ISerializationContext context, normalValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     startValue returns startValue
	 *
	 * Constraint:
	 *     value+=InnerStatement*
	 */
	protected void sequence_startValue(ISerializationContext context, startValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
