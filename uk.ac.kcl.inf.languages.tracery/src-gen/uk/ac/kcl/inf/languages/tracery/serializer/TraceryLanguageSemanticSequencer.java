/*
 * generated by Xtext 2.24.0
 */
package uk.ac.kcl.inf.languages.tracery.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import uk.ac.kcl.inf.languages.tracery.services.TraceryLanguageGrammarAccess;
import uk.ac.kcl.inf.languages.tracery.traceryLanguage.DeclaredVariable;
import uk.ac.kcl.inf.languages.tracery.traceryLanguage.InitialJSONEnding;
import uk.ac.kcl.inf.languages.tracery.traceryLanguage.InitialJSONLine;
import uk.ac.kcl.inf.languages.tracery.traceryLanguage.InnerStatements;
import uk.ac.kcl.inf.languages.tracery.traceryLanguage.NormalValue;
import uk.ac.kcl.inf.languages.tracery.traceryLanguage.StartValue;
import uk.ac.kcl.inf.languages.tracery.traceryLanguage.TraceryLanguagePackage;
import uk.ac.kcl.inf.languages.tracery.traceryLanguage.TraceryProgram;

@SuppressWarnings("all")
public class TraceryLanguageSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private TraceryLanguageGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == TraceryLanguagePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TraceryLanguagePackage.DECLARED_VARIABLE:
				sequence_DeclaredVariable(context, (DeclaredVariable) semanticObject); 
				return; 
			case TraceryLanguagePackage.INITIAL_JSON_ENDING:
				sequence_InitialJSONEnding(context, (InitialJSONEnding) semanticObject); 
				return; 
			case TraceryLanguagePackage.INITIAL_JSON_LINE:
				sequence_InitialJSONLine(context, (InitialJSONLine) semanticObject); 
				return; 
			case TraceryLanguagePackage.INNER_STATEMENTS:
				sequence_InnerStatements(context, (InnerStatements) semanticObject); 
				return; 
			case TraceryLanguagePackage.NORMAL_VALUE:
				sequence_NormalValue(context, (NormalValue) semanticObject); 
				return; 
			case TraceryLanguagePackage.START_VALUE:
				sequence_StartValue(context, (StartValue) semanticObject); 
				return; 
			case TraceryLanguagePackage.TRACERY_PROGRAM:
				sequence_TraceryProgram(context, (TraceryProgram) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     InnerStatements returns DeclaredVariable
	 *     DeclaredVariable returns DeclaredVariable
	 *
	 * Constraint:
	 *     var=[InitialJSONLine|ID]
	 */
	protected void sequence_DeclaredVariable(ISerializationContext context, DeclaredVariable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TraceryLanguagePackage.Literals.DECLARED_VARIABLE__VAR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TraceryLanguagePackage.Literals.DECLARED_VARIABLE__VAR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDeclaredVariableAccess().getVarInitialJSONLineIDTerminalRuleCall_0_1(), semanticObject.eGet(TraceryLanguagePackage.Literals.DECLARED_VARIABLE__VAR, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     InitialJSONEnding returns InitialJSONEnding
	 *
	 * Constraint:
	 *     (startVal+=StartValue vals+=NormalValue*)
	 */
	protected void sequence_InitialJSONEnding(ISerializationContext context, InitialJSONEnding semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InitialJSONLine returns InitialJSONLine
	 *
	 * Constraint:
	 *     (name=ID value=InitialJSONEnding)
	 */
	protected void sequence_InitialJSONLine(ISerializationContext context, InitialJSONLine semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TraceryLanguagePackage.Literals.INITIAL_JSON_LINE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TraceryLanguagePackage.Literals.INITIAL_JSON_LINE__NAME));
			if (transientValues.isValueTransient(semanticObject, TraceryLanguagePackage.Literals.INITIAL_JSON_LINE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TraceryLanguagePackage.Literals.INITIAL_JSON_LINE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInitialJSONLineAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getInitialJSONLineAccess().getValueInitialJSONEndingParserRuleCall_4_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     InnerStatements returns InnerStatements
	 *
	 * Constraint:
	 *     val=STRING
	 */
	protected void sequence_InnerStatements(ISerializationContext context, InnerStatements semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TraceryLanguagePackage.Literals.INNER_STATEMENTS__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TraceryLanguagePackage.Literals.INNER_STATEMENTS__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInnerStatementsAccess().getValSTRINGTerminalRuleCall_0_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NormalValue returns NormalValue
	 *
	 * Constraint:
	 *     valueInnerStatements+=InnerStatements
	 */
	protected void sequence_NormalValue(ISerializationContext context, NormalValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     StartValue returns StartValue
	 *
	 * Constraint:
	 *     valueInnerStatements+=InnerStatements
	 */
	protected void sequence_StartValue(ISerializationContext context, StartValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TraceryProgram returns TraceryProgram
	 *
	 * Constraint:
	 *     initialStatement+=InitialJSONLine
	 */
	protected void sequence_TraceryProgram(ISerializationContext context, TraceryProgram semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
