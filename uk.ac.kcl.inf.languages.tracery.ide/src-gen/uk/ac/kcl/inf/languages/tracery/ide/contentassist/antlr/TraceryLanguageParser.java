/*
 * generated by Xtext 2.24.0
 */
package uk.ac.kcl.inf.languages.tracery.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import uk.ac.kcl.inf.languages.tracery.ide.contentassist.antlr.internal.InternalTraceryLanguageParser;
import uk.ac.kcl.inf.languages.tracery.services.TraceryLanguageGrammarAccess;

public class TraceryLanguageParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(TraceryLanguageGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, TraceryLanguageGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getInnerStatementsAccess().getAlternatives(), "rule__InnerStatements__Alternatives");
			builder.put(grammarAccess.getTraceryProgramAccess().getGroup(), "rule__TraceryProgram__Group__0");
			builder.put(grammarAccess.getInitialJSONLineAccess().getGroup(), "rule__InitialJSONLine__Group__0");
			builder.put(grammarAccess.getInitialJSONEndingAccess().getGroup(), "rule__InitialJSONEnding__Group__0");
			builder.put(grammarAccess.getStartValueAccess().getGroup(), "rule__StartValue__Group__0");
			builder.put(grammarAccess.getNormalValueAccess().getGroup(), "rule__NormalValue__Group__0");
			builder.put(grammarAccess.getTraceryProgramAccess().getInitialStatementAssignment_1(), "rule__TraceryProgram__InitialStatementAssignment_1");
			builder.put(grammarAccess.getInitialJSONLineAccess().getNameAssignment_1(), "rule__InitialJSONLine__NameAssignment_1");
			builder.put(grammarAccess.getInitialJSONLineAccess().getValueAssignment_4(), "rule__InitialJSONLine__ValueAssignment_4");
			builder.put(grammarAccess.getInitialJSONEndingAccess().getStartValAssignment_1(), "rule__InitialJSONEnding__StartValAssignment_1");
			builder.put(grammarAccess.getInitialJSONEndingAccess().getValsAssignment_2(), "rule__InitialJSONEnding__ValsAssignment_2");
			builder.put(grammarAccess.getStartValueAccess().getValueInnerStatementsAssignment_1(), "rule__StartValue__ValueInnerStatementsAssignment_1");
			builder.put(grammarAccess.getNormalValueAccess().getValueInnerStatementsAssignment_2(), "rule__NormalValue__ValueInnerStatementsAssignment_2");
			builder.put(grammarAccess.getInnerStatementsAccess().getValAssignment_0(), "rule__InnerStatements__ValAssignment_0");
			builder.put(grammarAccess.getDeclaredVariableAccess().getVarAssignment(), "rule__DeclaredVariable__VarAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private TraceryLanguageGrammarAccess grammarAccess;

	@Override
	protected InternalTraceryLanguageParser createParser() {
		InternalTraceryLanguageParser result = new InternalTraceryLanguageParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public TraceryLanguageGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(TraceryLanguageGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
